示例代码：

public interface IAnimal
{
    void Walk();
}

using System;

public class Cat : IAnimal
{
    public void Walk()
    {
        Console.WriteLine("Cat is walking");
    }
}

public sealed class Program
{
    public static void Main()
    {
        // type of cat is Cat, call Cat's Walk method
        Cat cat = new Cat();
        cat.Walk();

        // type of animal is IAnimal, call IAnimal's Walk
        IAnimal animal = (IAnimal) cat;
        animal.Walk();
    }
}

实现接口方法时，若没有显式加*virtual* 关键字修饰，则编译器自动添加关键字*virtual* 和*sealed* 修饰。若显式添加了*virtual* 关键字，则其派生类可以重写该方法。

以上示例中，需要明确，Cat类中实现的Walk方法**既是自己的一个公共方法，也是实现IAnimal接口的方法**。作为其自有的公共方法，这允许以下代码调用该方法：
> Cat cat = new Cat();
> cat.Walk();

作为实现IAnimal接口的方法，这允许以下代码调用该方法：
> IAnimal animal = (IAnimal) cat;
> animal.Walk();

Cat类的派生类不能重写Walk方法，因为编译器默认将该方法修饰为sealed。通过显式的声明Walk方法为virtual，可以使其派生类重写该方法。

public class Cat : IAnimal
{
    public virtual void Walk()
    {
        Console.WriteLine("Cat is walking");
    }
}

public class Garfield : Cat
{
    public override void Walk()
    {
        Console.WriteLine("Garfield is walking");
    }
}

public sealed class Program
{
    public static void Main()
    {
        // IAnimal's implementation in Cat
        IAnimal animal = new Cat();
        animal.Walk();

        // IAnimal's implementation in Garfield
        animal = new Garfield();
        animal.Walk();
    }
}

当没有显式使用virtual修饰时，派生类Garfield可以通过重新继承IAnimal接口提供自己的实现。

public class Garfield : Cat, IAnimal
{
    new public void Walk()
    {
        Console.WriteLine("Garfield is walking");
    }
}

public sealed class Program
{
    public static void Main()
    {
        // Cat's implementation
        Cat cat = new Garfield();
        cat.Walk();

        // IAnimal's implementation in Garfield
        ((IAnimal)cat).Walk();
    }
}
        
如果在派生类Garfield中重新实现了IAnimal的Walk方法，什么情况下调用Cat中的实现，什么情况下调用Garfield的实现，可以总结为如下：
> 变量直接调用方法时(cat.Walk())，调用的是

public sealed class Program
{
    public static void Main()
    {
        // IAnimal's implementation in Cat
        IAnimal animal = new Cat();
        animal.Walk();

        // IAnimal's implementation in Garfield
        animal = new Garfield();
        animal.Walk();

        // Cat's implementation
        Cat cat = new Cat();
        cat.Walk();

        // IAnimal's implementation in Cat
        ((IAnimal) cat).Walk();

        // Cat's implementation
        cat = new Garfield();
        cat.Walk();

        // Cat's implementation
        ((Cat) cat).Walk();

        // IAnimal's implementation in Garfield
        ((IAnimal) cat).Walk();

        Garfield garfield = new Garfield();
        garfield.Walk();
    }
}






